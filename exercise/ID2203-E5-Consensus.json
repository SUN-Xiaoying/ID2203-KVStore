{"paragraphs":[{"text":"%md\n\n### Distributed Consensus\n\nIn this final programming assignment for Part I of the course you will have to complete the implementation of a variation of the famous Paxos algorithm.\n\nWhen you are done you simply have to export your notebook and then upload it in the \"Programming Exercise 5\" page.\n\n**Things to Remember**:\n1. Basic components such as `PerfectLink` and  `Best-Effort Broadcast` are already provided. No need to implement them.\n2. Execute the imports defined below **before** compiling your component implementations.\n3. We recommend making use of the component state and internal messages we have provided, if any, to complete the implementation logic.\n4. You can always print messages to the output log, from within handlers to see what happens during the simulation. e.g. `println(s\"Process $self delivers message $msg\");`\n5. Remember that during the simulation check you can print and observe the simulation time, i.e. with `System.currentTimeMillis()`.\n5. Do not forget to run the checker code block after each component implementation to ensure that all properties are satisfied **before** exporting and submitting the notebook.\n6. You can always restart the Kompics Interpreter to start fresh (Interpreter→KompicsInterpreter→Click Restart)\n\nGood luck! :)","dateUpdated":"2021-02-19T14:12:09+0000","config":{"tableHide":false,"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h3>Distributed Consensus</h3>\n<p>In this final programming assignment for Part I of the course you will have to complete the implementation of a variation of the famous Paxos algorithm.</p>\n<p>When you are done you simply have to export your notebook and then upload it in the &ldquo;Programming Exercise 5&rdquo; page.</p>\n<p><strong>Things to Remember</strong>:<br/>1. Basic components such as <code>PerfectLink</code> and <code>Best-Effort Broadcast</code> are already provided. No need to implement them.<br/>2. Execute the imports defined below <strong>before</strong> compiling your component implementations.<br/>3. We recommend making use of the component state and internal messages we have provided, if any, to complete the implementation logic.<br/>4. You can always print messages to the output log, from within handlers to see what happens during the simulation. e.g. <code>println(s&quot;Process $self delivers message $msg&quot;);</code><br/>5. Remember that during the simulation check you can print and observe the simulation time, i.e. with <code>System.currentTimeMillis()</code>.<br/>5. Do not forget to run the checker code block after each component implementation to ensure that all properties are satisfied <strong>before</strong> exporting and submitting the notebook.<br/>6. You can always restart the Kompics Interpreter to start fresh (Interpreter→KompicsInterpreter→Click Restart)</p>\n<p>Good luck! :)</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1613740629473_73203824","id":"20160927-134633_1462429338","dateCreated":"2021-02-19T13:17:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:382","user":"anonymous","dateFinished":"2021-02-19T14:12:09+0000","dateStarted":"2021-02-19T14:12:09+0000"},{"text":"import se.kth.edx.id2203.core.ExercisePrimitives.AddressUtils._\nimport se.kth.edx.id2203.core.Ports._\nimport se.kth.edx.id2203.validation._\nimport se.sics.kompics.network._\nimport se.sics.kompics.sl.{Init, _}\nimport se.sics.kompics.{KompicsEvent, ComponentDefinition => _, Port => _}\nimport scala.language.implicitConversions\nimport scala.collection.mutable.ListBuffer;\n\nimport se.sics.kompics.timer.{ScheduleTimeout, Timeout, Timer}\n","dateUpdated":"2021-02-19T14:12:09+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"fontSize":9,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"import se.kth.edx.id2203.core.ExercisePrimitives.AddressUtils._<br />import se.kth.edx.id2203.core.Ports._<br />import se.kth.edx.id2203.validation._<br />import se.sics.kompics.network._<br />import se.sics.kompics.sl.{Init, _}<br />import se.sics.kompics.{KompicsEvent, ComponentDefinition=>_, Port=>_}<br />import scala.language.implicitConversions<br />import scala.collection.mutable.ListBuffer<br />import se.sics.kompics.timer.{ScheduleTimeout, Timeout, Timer}<br />"}]},"apps":[],"jobName":"paragraph_1613740629481_70125832","id":"20160830-154917_187608468","dateCreated":"2021-02-19T13:17:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:383","user":"anonymous","dateFinished":"2021-02-19T14:12:09+0000","dateStarted":"2021-02-19T14:12:09+0000"},{"text":"%md\n\n## Leader-less Obstraction-Free Paxos for Single Value Consensus ##\n\nA (single value) Consensus Abstraction, in Kompics terms, is a component that **provides** the following port *(already imported in the notebook)*.\n\n     class Consensus extends Port{\n       request[C_Propose];\n       indication[C_Decide];\n     }\n\nAn **Consensus** component should request value proposals (`C_Propose`) and respond with decided value events (`C_Decide`) respectively as defined below:\n\n     case class C_Decide(value: Any) extends KompicsEvent;\n     case class C_Propose(value: Any) extends KompicsEvent;\n\nThe following properties define the expected behavior of a consensus abstraction more specifically:\n\n1. **Validity**: *Only proposed values may be decided.*\n2. **Uniform Agreement**: *No two nodes decide different values.*\n3. **Integrity**: *Each node can decide a value at most once.*\n4. **Termination**: *Every node eventually decides a value.*\n    \nThe recommended algorithm to use is the the one we call \"Leaderless Repeatable Paxos\" which initiates new proposal rounds until a decision has been made.\nYou can find the algorithm in the following  [document](https://courses.edx.org/asset-v1:KTHx+ID2203.1x+2016T3+type@asset+block@paxos-consensus.pdf) (pages 2-3).\n","dateUpdated":"2021-02-19T14:12:09+0000","config":{"editorSetting":{},"editorMode":"ace/mode/markdown","colWidth":12,"editorHide":true,"fontSize":9,"results":[{"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}}],"enabled":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<div class=\"markdown-body\">\n<h2>Leader-less Obstraction-Free Paxos for Single Value Consensus</h2>\n<p>A (single value) Consensus Abstraction, in Kompics terms, is a component that <strong>provides</strong> the following port <em>(already imported in the notebook)</em>.</p>\n<pre><code> class Consensus extends Port{\n   request[C_Propose];\n   indication[C_Decide];\n }\n</code></pre>\n<p>An <strong>Consensus</strong> component should request value proposals (<code>C_Propose</code>) and respond with decided value events (<code>C_Decide</code>) respectively as defined below:</p>\n<pre><code> case class C_Decide(value: Any) extends KompicsEvent;\n case class C_Propose(value: Any) extends KompicsEvent;\n</code></pre>\n<p>The following properties define the expected behavior of a consensus abstraction more specifically:</p>\n<ol>\n  <li><strong>Validity</strong>: <em>Only proposed values may be decided.</em></li>\n  <li><strong>Uniform Agreement</strong>: <em>No two nodes decide different values.</em></li>\n  <li><strong>Integrity</strong>: <em>Each node can decide a value at most once.</em></li>\n  <li><strong>Termination</strong>: <em>Every node eventually decides a value.</em></li>\n</ol>\n<p>The recommended algorithm to use is the the one we call &ldquo;Leaderless Repeatable Paxos&rdquo; which initiates new proposal rounds until a decision has been made.<br/>You can find the algorithm in the following <a href=\"https://courses.edx.org/asset-v1:KTHx+ID2203.1x+2016T3+type@asset+block@paxos-consensus.pdf\">document</a> (pages 2-3).</p>\n</div>"}]},"apps":[],"jobName":"paragraph_1613740629482_71280079","id":"20160930-115754_781424547","dateCreated":"2021-02-19T13:17:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:384","user":"anonymous","dateFinished":"2021-02-19T14:12:09+0000","dateStarted":"2021-02-19T14:12:09+0000"},{"text":"  case class Prepare(proposalBallot: (Int, Int)) extends KompicsEvent;\n  case class Promise(promiseBallot: (Int, Int), acceptedBallot: (Int, Int), acceptedValue: Option[Any]) extends KompicsEvent;\n  case class Accept(acceptBallot: (Int, Int), proposedValue: Any) extends KompicsEvent;\n  case class Accepted(acceptedBallot: (Int, Int)) extends KompicsEvent;\n  case class Nack(ballot: (Int, Int)) extends KompicsEvent;\n  case class Decided(decidedValue: Any) extends KompicsEvent;\n\n  /**\n    * This augments tuples with comparison operators implicitly, which you can use in your code, for convenience. \n    * examples: (1,2) > (1,4) yields 'false' and  (5,4) <= (7,4) yields 'true' \n    */\n  implicit def addComparators[A](x: A)(implicit o: math.Ordering[A]): o.OrderingOps = o.mkOrderingOps(x);\n  \n  //HINT: After you execute the latter implicit ordering you can compare tuples as such within your component implementation:\n  (1,2) <= (1,4);","dateUpdated":"2021-02-19T14:12:09+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"fontSize":9,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"defined class Prepare<br />defined class Promise<br />defined class Accept<br />defined class Accepted<br />defined class Nack<br />defined class Decided<br />addComparators: [A](x: A)(implicit o: scala.math.Ordering[A])o.OrderingOps<br />res16: Boolean = true<br />"}]},"apps":[],"jobName":"paragraph_1613740629482_71280079","id":"20160830-154940_1300846994","dateCreated":"2021-02-19T13:17:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:385","user":"anonymous","dateFinished":"2021-02-19T14:12:10+0000","dateStarted":"2021-02-19T14:12:09+0000"},{"text":"\nclass Paxos(paxosInit: Init[Paxos]) extends ComponentDefinition {\n\n  //Port Subscriptions for Paxos\n\n  val consensus = provides[Consensus];\n  val beb = requires[BestEffortBroadcast];\n  val plink = requires[PerfectLink];\n \n  //Internal State of Paxos\n  val (rank, numProcesses) = paxosInit match {\n    case Init(s: Address, qSize: Int) => (toRank(s), qSize)\n  }\n\n  //Proposer State\n  var round = 0;\n  var proposedValue: Option[Any] = None;\n  var promises: ListBuffer[((Int, Int), Option[Any])] = ListBuffer.empty;\n  var numOfAccepts = 0;\n  var decided = false;\n\n  //Acceptor State\n  var promisedBallot = (0, 0);\n  var acceptedBallot = (0, 0);\n  var acceptedValue: Option[Any] = None;\n\n  def propose() = {\n   /* \n   INSERT YOUR CODE HERE \n   */\n       if (decided == false){\n       round = round +1;\n       numOfAccepts = 0;\n       promises = ListBuffer.empty;\n       trigger(BEB_Broadcast(Prepare(round,rank)) -> beb);\n    }\n  }\n\n  consensus uponEvent {\n    case C_Propose(value) => {\n   /* \n   INSERT YOUR CODE HERE \n   */\n        proposedValue = Some(value)\n        propose();\n    }\n  }\n\n\n  beb uponEvent {\n\n    case BEB_Deliver(src, prep: Prepare) => {\n   /* \n   INSERT YOUR CODE HERE \n   */\n       if (prep.proposalBallot > promisedBallot) {\n           promisedBallot = prep.proposalBallot;\n           trigger(PL_Send(src,Promise(promisedBallot, acceptedBallot, acceptedValue)) -> plink);\n       } else {\n           trigger(PL_Send(src,Nack(prep.proposalBallot)) -> plink);\n        }\n    };\n\n    case BEB_Deliver(src, acc: Accept) => {\n   /* \n   INSERT YOUR CODE HERE \n   */\n     if(promisedBallot <= acc.acceptBallot){\n           promisedBallot = acc.acceptBallot;\n           acceptedBallot = acc.acceptBallot;\n           acceptedValue = Some(acc.proposedValue);\n           trigger(PL_Send(src,Accepted(acc.acceptBallot)) -> plink);\n          \n        } else {\n           trigger(PL_Send(src,Nack(acc.acceptBallot)) -> plink);\n        }\n    };\n\n    case BEB_Deliver(src, dec : Decided) => {\n   /* \n   INSERT YOUR CODE HERE \n   */\n        if(decided == false) {\n            trigger(C_Decide(dec.decidedValue) -> consensus);\n           decided = true;\n        }\n    }\n  }\n\n  plink uponEvent {\n\n    case PL_Deliver(src, prepAck: Promise) => {\n      if ((round, rank) == prepAck.promiseBallot) {\n        /* \n           INSERT YOUR CODE HERE \n        */\n           promises=promises:+((prepAck.acceptedBallot, prepAck.acceptedValue));\n        if (promises.size == (numProcesses/2+1)){\n            var maxBallot = (0, 0);\n            var value : Option[Any] = None;\n            for ((ballot, value_tmp) <- promises){\n                if (ballot>maxBallot){\n                    maxBallot = ballot;\n                    value = value_tmp;\n                }\n            }\n            if (value != None) {proposedValue = value;}\n            trigger(BEB_Broadcast(Accept((round,rank),proposedValue.get)) -> beb);\n        }\n      }\n    };\n\n    case PL_Deliver(src, accAck: Accepted) => {\n      if ((round, rank) == accAck.acceptedBallot) {\n        /* \n           INSERT YOUR CODE HERE \n        */\n       numOfAccepts +=1;\n        if (numOfAccepts == (numProcesses/2+1)){\n            trigger(BEB_Broadcast(Decided(proposedValue.get)) -> beb);\n        }\n      \n      }\n    };\n\n    case PL_Deliver(src, nack: Nack) => {\n      if ((round, rank) == nack.ballot) {\n        /* \n           INSERT YOUR CODE HERE \n        */\n        propose()\n      }\n    }\n  }\n  \n \n};","dateUpdated":"2021-02-19T14:12:42+0000","config":{"lineNumbers":true,"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"fontSize":9,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"defined class Paxos<br />"}]},"apps":[],"jobName":"paragraph_1613740629483_70895330","id":"20160830-154952_592749615","dateCreated":"2021-02-19T13:17:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:386","user":"anonymous","dateFinished":"2021-02-19T14:12:43+0000","dateStarted":"2021-02-19T14:12:42+0000"},{"text":"checkSingleValueConsensus[Paxos]();","dateUpdated":"2021-02-19T14:12:47+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"fontSize":9,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"HTML","data":"<br />Your submission has been locally simulated and validated.<br /><br /><a href=\"\\static\\log.txt\" target=\"_blank\">Click Here</a> to view the output of the simulation.<br /><style type=\"text/css\">.tg  {border-collapse:collapse;border-spacing:0;border-color:#aabcfe;}.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#669;background-color:#e8edff;}.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:#aabcfe;color:#039;background-color:#b9c9fe;}.tg .tg-mb3i{background-color:#D2E4FC;text-align:right;vertical-align:top}.tg .tg-lqy6{text-align:right;vertical-align:top}.tg .tg-vlnx{background-color:#3071a9;color:#ffffff;text-align:center;vertical-align:top}.tg .tg-6k2t{background-color:#D2E4FC;vertical-align:top}.tg tg-6k2l{background-color:#ffb3b3;vertical-align:top}.tg .tg-yw4l{vertical-align:top}</style><table class=\"tg\">  <tr>    <th class=\"tg-vlnx\" colspan=\"3\">Correction Results</th>  </tr><br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Validity</td> <td class=\"tg-6k2t\">✔: Every value decided has been previously proposed<br></td>  </tr>  <br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Uniform Agreement</td> <td class=\"tg-6k2t\">✔: There were no two nodes deciding different values<br></td>  </tr>  <br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Integrity</td> <td class=\"tg-6k2t\">✔: Each node decided a value at most once<br></td>  </tr>  <br /><tr>    <td class=\"tg-6k2t\">PASSED</td> <td class=\"tg-6k2t\">Termination</td> <td class=\"tg-6k2t\">✔: Each node eventually decides<br></td>  </tr>  <br /></table><br />Final Comments<br />**************<br />Congratulations! Your implementation of the 'Single Value Consensus' satisfies all properties! <br />A unique token has been generated for your submission right below. Please do not edit. <br /><br />{\"gradingToken\":[45,45,45,45,45,66,69,71,73,78,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10,86,101,114,115,105,111,110,58,32,66,67,80,71,32,118,49,46,53,53,10,10,104,81,73,77,65,57,79,116,77,118,84,69,98,74,49,102,65,81,47,43,80,86,114,98,66,108,75,103,66,100,115,73,113,113,114,71,57,115,79,78,76,122,101,100,77,101,71,104,87,80,49,52,51,86,115,118,105,120,102,80,99,105,73,107,10,47,75,104,109,98,49,114,108,65,113,76,56,70,78,55,82,57,50,116,113,89,112,77,53,56,116,108,98,73,100,107,101,99,97,105,100,122,117,51,68,83,113,78,104,49,88,87,104,106,89,74,85,73,112,99,84,100,52,122,114,83,83,78,49,10,82,119,108,80,104,120,100,107,87,74,87,118,82,99,106,68,78,53,66,99,54,49,52,52,117,99,77,111,97,48,106,66,101,90,107,74,81,52,73,57,113,48,90,67,48,121,57,51,65,90,106,122,51,70,88,115,116,48,121,47,72,86,56,102,10,111,118,49,51,70,111,86,50,85,72,77,65,49,43,117,114,56,108,103,101,77,114,118,121,108,100,54,107,66,79,122,66,69,52,69,79,113,119,74,47,102,50,121,72,51,87,65,69,52,48,117,67,121,57,76,97,57,47,85,97,99,70,104,109,10,99,74,55,119,100,113,75,48,83,111,120,56,68,66,55,104,57,55,120,57,103,65,87,107,82,79,73,109,117,110,101,68,74,71,88,117,85,108,111,102,66,68,120,81,55,55,72,90,97,97,111,101,57,100,100,89,57,87,48,119,54,74,52,68,10,116,116,117,66,101,47,100,76,73,109,122,122,98,111,117,111,78,81,87,106,49,69,103,119,75,75,67,90,73,75,108,57,78,107,67,122,110,107,86,112,85,103,104,104,86,81,119,90,85,54,119,120,114,50,106,56,97,76,56,117,104,48,69,105,10,52,106,71,79,118,112,50,102,120,101,110,81,83,115,115,74,105,78,86,78,83,87,66,98,109,90,109,84,80,51,110,87,99,89,113,52,122,71,43,101,55,77,114,112,47,76,56,119,67,104,67,113,104,47,49,77,120,83,99,68,119,107,115,90,10,114,54,82,79,82,66,86,79,48,108,51,55,76,108,103,52,104,74,116,89,105,85,68,98,103,71,69,69,57,116,120,75,100,104,114,101,116,100,119,101,68,110,120,76,81,81,97,103,99,48,48,99,115,86,109,122,85,110,72,53,104,79,90,106,10,43,83,112,119,100,98,76,99,105,119,85,49,76,73,78,107,47,120,110,88,114,111,120,105,51,75,48,118,65,74,81,110,48,51,87,56,72,101,86,75,83,73,54,114,115,66,72,113,101,107,68,48,102,113,98,73,107,74,110,75,53,114,86,113,10,69,117,106,80,101,119,85,67,97,120,89,78,47,97,66,117,120,106,49,43,66,74,108,104,103,71,108,52,76,110,53,90,51,53,114,90,97,70,116,79,108,50,86,66,75,119,115,100,99,113,65,86,76,106,118,108,101,65,72,88,97,114,107,81,10,100,105,47,76,121,86,111,82,89,80,71,87,53,104,104,97,76,118,51,74,77,104,112,82,71,109,90,103,102,53,77,101,100,105,106,52,85,99,97,84,90,88,88,117,75,72,89,121,90,83,70,71,119,83,71,87,120,89,111,57,78,73,80,83,10,119,69,103,66,111,75,47,47,82,119,118,52,55,67,79,56,57,75,89,55,98,117,119,80,52,104,109,69,110,67,55,43,49,106,66,88,71,119,115,53,81,72,118,110,100,74,54,65,68,56,70,108,97,68,90,82,97,55,109,101,112,119,105,121,10,65,110,119,102,84,53,101,69,116,115,78,70,97,119,77,120,118,117,102,86,67,101,118,115,49,55,116,47,53,120,107,53,86,72,119,71,99,52,112,84,72,115,83,106,106,79,88,76,71,113,115,98,101,83,101,109,101,101,116,73,120,99,80,84,10,108,49,78,102,77,70,108,78,88,108,78,86,82,73,118,119,68,86,118,99,82,87,104,49,104,99,65,50,52,109,119,121,121,66,84,79,65,100,121,74,66,73,75,85,74,50,75,84,57,113,73,116,81,57,81,100,66,81,100,108,78,120,107,48,10,100,56,68,111,116,111,86,102,78,67,75,53,71,82,119,75,103,68,102,117,87,116,53,117,118,65,76,111,86,103,65,69,51,51,100,98,48,70,55,73,106,53,90,120,57,86,48,104,85,120,79,108,49,54,88,110,114,72,71,85,98,109,111,54,10,115,119,56,82,86,78,108,122,67,50,68,76,51,106,73,85,78,82,117,81,116,52,113,100,88,79,118,97,72,100,68,73,89,65,105,115,72,87,101,80,107,122,115,79,80,87,100,119,97,65,74,105,104,68,114,75,117,118,120,70,117,67,73,47,10,80,101,106,76,75,47,109,72,66,103,107,56,78,100,68,119,111,87,89,88,75,116,88,83,43,79,109,97,120,48,97,118,116,43,52,61,10,61,104,76,67,67,10,45,45,45,45,45,69,78,68,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10]}<br />res18: Boolean = true<br />"}]},"apps":[],"jobName":"paragraph_1613740629483_70895330","id":"20160830-155009_392534435","dateCreated":"2021-02-19T13:17:09+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:387","user":"anonymous","dateFinished":"2021-02-19T14:12:51+0000","dateStarted":"2021-02-19T14:12:47+0000"},{"dateUpdated":"2021-02-19T14:13:03+0000","config":{"tableHide":false,"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala","colWidth":12,"fontSize":9,"results":{},"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}}},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1613740629483_70895330","id":"20160830-155043_337959288","dateCreated":"2021-02-19T13:17:09+0000","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:388","user":"anonymous","text":"{\"gradingToken\":[45,45,45,45,45,66,69,71,73,78,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10,86,101,114,115,105,111,110,58,32,66,67,80,71,32,118,49,46,53,53,10,10,104,81,73,77,65,57,79,116,77,118,84,69,98,74,49,102,65,81,47,43,80,86,114,98,66,108,75,103,66,100,115,73,113,113,114,71,57,115,79,78,76,122,101,100,77,101,71,104,87,80,49,52,51,86,115,118,105,120,102,80,99,105,73,107,10,47,75,104,109,98,49,114,108,65,113,76,56,70,78,55,82,57,50,116,113,89,112,77,53,56,116,108,98,73,100,107,101,99,97,105,100,122,117,51,68,83,113,78,104,49,88,87,104,106,89,74,85,73,112,99,84,100,52,122,114,83,83,78,49,10,82,119,108,80,104,120,100,107,87,74,87,118,82,99,106,68,78,53,66,99,54,49,52,52,117,99,77,111,97,48,106,66,101,90,107,74,81,52,73,57,113,48,90,67,48,121,57,51,65,90,106,122,51,70,88,115,116,48,121,47,72,86,56,102,10,111,118,49,51,70,111,86,50,85,72,77,65,49,43,117,114,56,108,103,101,77,114,118,121,108,100,54,107,66,79,122,66,69,52,69,79,113,119,74,47,102,50,121,72,51,87,65,69,52,48,117,67,121,57,76,97,57,47,85,97,99,70,104,109,10,99,74,55,119,100,113,75,48,83,111,120,56,68,66,55,104,57,55,120,57,103,65,87,107,82,79,73,109,117,110,101,68,74,71,88,117,85,108,111,102,66,68,120,81,55,55,72,90,97,97,111,101,57,100,100,89,57,87,48,119,54,74,52,68,10,116,116,117,66,101,47,100,76,73,109,122,122,98,111,117,111,78,81,87,106,49,69,103,119,75,75,67,90,73,75,108,57,78,107,67,122,110,107,86,112,85,103,104,104,86,81,119,90,85,54,119,120,114,50,106,56,97,76,56,117,104,48,69,105,10,52,106,71,79,118,112,50,102,120,101,110,81,83,115,115,74,105,78,86,78,83,87,66,98,109,90,109,84,80,51,110,87,99,89,113,52,122,71,43,101,55,77,114,112,47,76,56,119,67,104,67,113,104,47,49,77,120,83,99,68,119,107,115,90,10,114,54,82,79,82,66,86,79,48,108,51,55,76,108,103,52,104,74,116,89,105,85,68,98,103,71,69,69,57,116,120,75,100,104,114,101,116,100,119,101,68,110,120,76,81,81,97,103,99,48,48,99,115,86,109,122,85,110,72,53,104,79,90,106,10,43,83,112,119,100,98,76,99,105,119,85,49,76,73,78,107,47,120,110,88,114,111,120,105,51,75,48,118,65,74,81,110,48,51,87,56,72,101,86,75,83,73,54,114,115,66,72,113,101,107,68,48,102,113,98,73,107,74,110,75,53,114,86,113,10,69,117,106,80,101,119,85,67,97,120,89,78,47,97,66,117,120,106,49,43,66,74,108,104,103,71,108,52,76,110,53,90,51,53,114,90,97,70,116,79,108,50,86,66,75,119,115,100,99,113,65,86,76,106,118,108,101,65,72,88,97,114,107,81,10,100,105,47,76,121,86,111,82,89,80,71,87,53,104,104,97,76,118,51,74,77,104,112,82,71,109,90,103,102,53,77,101,100,105,106,52,85,99,97,84,90,88,88,117,75,72,89,121,90,83,70,71,119,83,71,87,120,89,111,57,78,73,80,83,10,119,69,103,66,111,75,47,47,82,119,118,52,55,67,79,56,57,75,89,55,98,117,119,80,52,104,109,69,110,67,55,43,49,106,66,88,71,119,115,53,81,72,118,110,100,74,54,65,68,56,70,108,97,68,90,82,97,55,109,101,112,119,105,121,10,65,110,119,102,84,53,101,69,116,115,78,70,97,119,77,120,118,117,102,86,67,101,118,115,49,55,116,47,53,120,107,53,86,72,119,71,99,52,112,84,72,115,83,106,106,79,88,76,71,113,115,98,101,83,101,109,101,101,116,73,120,99,80,84,10,108,49,78,102,77,70,108,78,88,108,78,86,82,73,118,119,68,86,118,99,82,87,104,49,104,99,65,50,52,109,119,121,121,66,84,79,65,100,121,74,66,73,75,85,74,50,75,84,57,113,73,116,81,57,81,100,66,81,100,108,78,120,107,48,10,100,56,68,111,116,111,86,102,78,67,75,53,71,82,119,75,103,68,102,117,87,116,53,117,118,65,76,111,86,103,65,69,51,51,100,98,48,70,55,73,106,53,90,120,57,86,48,104,85,120,79,108,49,54,88,110,114,72,71,85,98,109,111,54,10,115,119,56,82,86,78,108,122,67,50,68,76,51,106,73,85,78,82,117,81,116,52,113,100,88,79,118,97,72,100,68,73,89,65,105,115,72,87,101,80,107,122,115,79,80,87,100,119,97,65,74,105,104,68,114,75,117,118,120,70,117,67,73,47,10,80,101,106,76,75,47,109,72,66,103,107,56,78,100,68,119,111,87,89,88,75,116,88,83,43,79,109,97,120,48,97,118,116,43,52,61,10,61,104,76,67,67,10,45,45,45,45,45,69,78,68,32,80,71,80,32,77,69,83,83,65,71,69,45,45,45,45,45,10]}\nres18: Boolean = true"}],"name":"Exercise-Consensus","id":"2FY93F1KB","angularObjects":{"2BKQCVH92:shared_process":[],"2CVXXPNWV:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}